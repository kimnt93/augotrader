// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: service.proto

package grpc_ray

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AccountBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance      string  `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"`
	MarketId     string  `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	AccountId    string  `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	TradingPl    float32 `protobuf:"fixed32,4,opt,name=trading_pl,json=tradingPl,proto3" json:"trading_pl,omitempty"`
	FloatingPl   float32 `protobuf:"fixed32,5,opt,name=floating_pl,json=floatingPl,proto3" json:"floating_pl,omitempty"`
	TotalPl      float32 `protobuf:"fixed32,6,opt,name=total_pl,json=totalPl,proto3" json:"total_pl,omitempty"`
	Ee           float32 `protobuf:"fixed32,7,opt,name=ee,proto3" json:"ee,omitempty"`
	Nav          float32 `protobuf:"fixed32,8,opt,name=nav,proto3" json:"nav,omitempty"`
	Withdrawable float32 `protobuf:"fixed32,9,opt,name=withdrawable,proto3" json:"withdrawable,omitempty"`
	Fee          float32 `protobuf:"fixed32,10,opt,name=fee,proto3" json:"fee,omitempty"`
	Interest     float32 `protobuf:"fixed32,11,opt,name=interest,proto3" json:"interest,omitempty"`
	Commission   float32 `protobuf:"fixed32,12,opt,name=commission,proto3" json:"commission,omitempty"`
}

func (x *AccountBalance) Reset() {
	*x = AccountBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountBalance) ProtoMessage() {}

func (x *AccountBalance) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountBalance.ProtoReflect.Descriptor instead.
func (*AccountBalance) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{0}
}

func (x *AccountBalance) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *AccountBalance) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *AccountBalance) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AccountBalance) GetTradingPl() float32 {
	if x != nil {
		return x.TradingPl
	}
	return 0
}

func (x *AccountBalance) GetFloatingPl() float32 {
	if x != nil {
		return x.FloatingPl
	}
	return 0
}

func (x *AccountBalance) GetTotalPl() float32 {
	if x != nil {
		return x.TotalPl
	}
	return 0
}

func (x *AccountBalance) GetEe() float32 {
	if x != nil {
		return x.Ee
	}
	return 0
}

func (x *AccountBalance) GetNav() float32 {
	if x != nil {
		return x.Nav
	}
	return 0
}

func (x *AccountBalance) GetWithdrawable() float32 {
	if x != nil {
		return x.Withdrawable
	}
	return 0
}

func (x *AccountBalance) GetFee() float32 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *AccountBalance) GetInterest() float32 {
	if x != nil {
		return x.Interest
	}
	return 0
}

func (x *AccountBalance) GetCommission() float32 {
	if x != nil {
		return x.Commission
	}
	return 0
}

type CreatedOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol      string  `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	MarketId    string  `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	AccountId   string  `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	OrderSide   string  `protobuf:"bytes,4,opt,name=order_side,json=orderSide,proto3" json:"order_side,omitempty"`
	OrderType   string  `protobuf:"bytes,5,opt,name=order_type,json=orderType,proto3" json:"order_type,omitempty"`
	OrderPrice  float64 `protobuf:"fixed64,6,opt,name=order_price,json=orderPrice,proto3" json:"order_price,omitempty"`
	OrderQty    float64 `protobuf:"fixed64,7,opt,name=order_qty,json=orderQty,proto3" json:"order_qty,omitempty"`
	OrderId     string  `protobuf:"bytes,8,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	OrderStatus string  `protobuf:"bytes,9,opt,name=order_status,json=orderStatus,proto3" json:"order_status,omitempty"`
	StopOrder   bool    `protobuf:"varint,10,opt,name=stop_order,json=stopOrder,proto3" json:"stop_order,omitempty"`
	StopPrice   float64 `protobuf:"fixed64,11,opt,name=stop_price,json=stopPrice,proto3" json:"stop_price,omitempty"`
	StopType    string  `protobuf:"bytes,12,opt,name=stop_type,json=stopType,proto3" json:"stop_type,omitempty"`
	StopStep    float64 `protobuf:"fixed64,13,opt,name=stop_step,json=stopStep,proto3" json:"stop_step,omitempty"`
	LossStep    float64 `protobuf:"fixed64,14,opt,name=loss_step,json=lossStep,proto3" json:"loss_step,omitempty"`
	ProfitStep  float64 `protobuf:"fixed64,15,opt,name=profit_step,json=profitStep,proto3" json:"profit_step,omitempty"`
	AvgPrice    float64 `protobuf:"fixed64,16,opt,name=avg_price,json=avgPrice,proto3" json:"avg_price,omitempty"`
	OsQty       float64 `protobuf:"fixed64,17,opt,name=os_qty,json=osQty,proto3" json:"os_qty,omitempty"`
	FilledQty   float64 `protobuf:"fixed64,18,opt,name=filled_qty,json=filledQty,proto3" json:"filled_qty,omitempty"`
}

func (x *CreatedOrder) Reset() {
	*x = CreatedOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatedOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatedOrder) ProtoMessage() {}

func (x *CreatedOrder) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatedOrder.ProtoReflect.Descriptor instead.
func (*CreatedOrder) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{1}
}

func (x *CreatedOrder) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *CreatedOrder) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *CreatedOrder) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CreatedOrder) GetOrderSide() string {
	if x != nil {
		return x.OrderSide
	}
	return ""
}

func (x *CreatedOrder) GetOrderType() string {
	if x != nil {
		return x.OrderType
	}
	return ""
}

func (x *CreatedOrder) GetOrderPrice() float64 {
	if x != nil {
		return x.OrderPrice
	}
	return 0
}

func (x *CreatedOrder) GetOrderQty() float64 {
	if x != nil {
		return x.OrderQty
	}
	return 0
}

func (x *CreatedOrder) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *CreatedOrder) GetOrderStatus() string {
	if x != nil {
		return x.OrderStatus
	}
	return ""
}

func (x *CreatedOrder) GetStopOrder() bool {
	if x != nil {
		return x.StopOrder
	}
	return false
}

func (x *CreatedOrder) GetStopPrice() float64 {
	if x != nil {
		return x.StopPrice
	}
	return 0
}

func (x *CreatedOrder) GetStopType() string {
	if x != nil {
		return x.StopType
	}
	return ""
}

func (x *CreatedOrder) GetStopStep() float64 {
	if x != nil {
		return x.StopStep
	}
	return 0
}

func (x *CreatedOrder) GetLossStep() float64 {
	if x != nil {
		return x.LossStep
	}
	return 0
}

func (x *CreatedOrder) GetProfitStep() float64 {
	if x != nil {
		return x.ProfitStep
	}
	return 0
}

func (x *CreatedOrder) GetAvgPrice() float64 {
	if x != nil {
		return x.AvgPrice
	}
	return 0
}

func (x *CreatedOrder) GetOsQty() float64 {
	if x != nil {
		return x.OsQty
	}
	return 0
}

func (x *CreatedOrder) GetFilledQty() float64 {
	if x != nil {
		return x.FilledQty
	}
	return 0
}

type MaxBuySellQty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketId  string  `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	AccountId string  `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Symbol    string  `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	MaxQty    string  `protobuf:"bytes,4,opt,name=max_qty,json=maxQty,proto3" json:"max_qty,omitempty"`
	Power     float32 `protobuf:"fixed32,5,opt,name=power,proto3" json:"power,omitempty"`
}

func (x *MaxBuySellQty) Reset() {
	*x = MaxBuySellQty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxBuySellQty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxBuySellQty) ProtoMessage() {}

func (x *MaxBuySellQty) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxBuySellQty.ProtoReflect.Descriptor instead.
func (*MaxBuySellQty) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{2}
}

func (x *MaxBuySellQty) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *MaxBuySellQty) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *MaxBuySellQty) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *MaxBuySellQty) GetMaxQty() string {
	if x != nil {
		return x.MaxQty
	}
	return ""
}

func (x *MaxBuySellQty) GetPower() float32 {
	if x != nil {
		return x.Power
	}
	return 0
}

type StockPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol      string  `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	MarketId    string  `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	AccountId   string  `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Position    string  `protobuf:"bytes,4,opt,name=position,proto3" json:"position,omitempty"`
	TradingPl   float32 `protobuf:"fixed32,5,opt,name=trading_pl,json=tradingPl,proto3" json:"trading_pl,omitempty"`
	FloatingPl  float32 `protobuf:"fixed32,6,opt,name=floating_pl,json=floatingPl,proto3" json:"floating_pl,omitempty"`
	MarketPrice float32 `protobuf:"fixed32,7,opt,name=market_price,json=marketPrice,proto3" json:"market_price,omitempty"`
	AvgPrice    float32 `protobuf:"fixed32,8,opt,name=avg_price,json=avgPrice,proto3" json:"avg_price,omitempty"`
}

func (x *StockPosition) Reset() {
	*x = StockPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockPosition) ProtoMessage() {}

func (x *StockPosition) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockPosition.ProtoReflect.Descriptor instead.
func (*StockPosition) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{3}
}

func (x *StockPosition) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *StockPosition) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *StockPosition) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *StockPosition) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *StockPosition) GetTradingPl() float32 {
	if x != nil {
		return x.TradingPl
	}
	return 0
}

func (x *StockPosition) GetFloatingPl() float32 {
	if x != nil {
		return x.FloatingPl
	}
	return 0
}

func (x *StockPosition) GetMarketPrice() float32 {
	if x != nil {
		return x.MarketPrice
	}
	return 0
}

func (x *StockPosition) GetAvgPrice() float32 {
	if x != nil {
		return x.AvgPrice
	}
	return 0
}

type CurrentMarket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradingTime   string  `protobuf:"bytes,1,opt,name=trading_time,json=tradingTime,proto3" json:"trading_time,omitempty"`
	Symbol        string  `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	CurrentPrice  float32 `protobuf:"fixed32,3,opt,name=current_price,json=currentPrice,proto3" json:"current_price,omitempty"`
	CurrentVolume float32 `protobuf:"fixed32,4,opt,name=current_volume,json=currentVolume,proto3" json:"current_volume,omitempty"`
	TotalVolume   float32 `protobuf:"fixed32,5,opt,name=total_volume,json=totalVolume,proto3" json:"total_volume,omitempty"`
	PriceChange   float32 `protobuf:"fixed32,6,opt,name=price_change,json=priceChange,proto3" json:"price_change,omitempty"`
	ChangePercent float32 `protobuf:"fixed32,7,opt,name=change_percent,json=changePercent,proto3" json:"change_percent,omitempty"`
	RefPrice      float32 `protobuf:"fixed32,8,opt,name=ref_price,json=refPrice,proto3" json:"ref_price,omitempty"`
	CeilingPrice  float32 `protobuf:"fixed32,9,opt,name=ceiling_price,json=ceilingPrice,proto3" json:"ceiling_price,omitempty"`
	FloorPrice    float32 `protobuf:"fixed32,10,opt,name=floor_price,json=floorPrice,proto3" json:"floor_price,omitempty"`
	OpenPrice     float32 `protobuf:"fixed32,11,opt,name=open_price,json=openPrice,proto3" json:"open_price,omitempty"`
	HighPrice     float32 `protobuf:"fixed32,12,opt,name=high_price,json=highPrice,proto3" json:"high_price,omitempty"`
	LowPrice      float32 `protobuf:"fixed32,13,opt,name=low_price,json=lowPrice,proto3" json:"low_price,omitempty"`
	AvgPrice      float32 `protobuf:"fixed32,14,opt,name=avg_price,json=avgPrice,proto3" json:"avg_price,omitempty"`
	BidPrice_01   float32 `protobuf:"fixed32,15,opt,name=bid_price_01,json=bidPrice01,proto3" json:"bid_price_01,omitempty"`
	BidVolume_01  float32 `protobuf:"fixed32,16,opt,name=bid_volume_01,json=bidVolume01,proto3" json:"bid_volume_01,omitempty"`
	AskPrice_01   float32 `protobuf:"fixed32,17,opt,name=ask_price_01,json=askPrice01,proto3" json:"ask_price_01,omitempty"`
	AskVolume_01  float32 `protobuf:"fixed32,18,opt,name=ask_volume_01,json=askVolume01,proto3" json:"ask_volume_01,omitempty"`
}

func (x *CurrentMarket) Reset() {
	*x = CurrentMarket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentMarket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentMarket) ProtoMessage() {}

func (x *CurrentMarket) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentMarket.ProtoReflect.Descriptor instead.
func (*CurrentMarket) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{4}
}

func (x *CurrentMarket) GetTradingTime() string {
	if x != nil {
		return x.TradingTime
	}
	return ""
}

func (x *CurrentMarket) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *CurrentMarket) GetCurrentPrice() float32 {
	if x != nil {
		return x.CurrentPrice
	}
	return 0
}

func (x *CurrentMarket) GetCurrentVolume() float32 {
	if x != nil {
		return x.CurrentVolume
	}
	return 0
}

func (x *CurrentMarket) GetTotalVolume() float32 {
	if x != nil {
		return x.TotalVolume
	}
	return 0
}

func (x *CurrentMarket) GetPriceChange() float32 {
	if x != nil {
		return x.PriceChange
	}
	return 0
}

func (x *CurrentMarket) GetChangePercent() float32 {
	if x != nil {
		return x.ChangePercent
	}
	return 0
}

func (x *CurrentMarket) GetRefPrice() float32 {
	if x != nil {
		return x.RefPrice
	}
	return 0
}

func (x *CurrentMarket) GetCeilingPrice() float32 {
	if x != nil {
		return x.CeilingPrice
	}
	return 0
}

func (x *CurrentMarket) GetFloorPrice() float32 {
	if x != nil {
		return x.FloorPrice
	}
	return 0
}

func (x *CurrentMarket) GetOpenPrice() float32 {
	if x != nil {
		return x.OpenPrice
	}
	return 0
}

func (x *CurrentMarket) GetHighPrice() float32 {
	if x != nil {
		return x.HighPrice
	}
	return 0
}

func (x *CurrentMarket) GetLowPrice() float32 {
	if x != nil {
		return x.LowPrice
	}
	return 0
}

func (x *CurrentMarket) GetAvgPrice() float32 {
	if x != nil {
		return x.AvgPrice
	}
	return 0
}

func (x *CurrentMarket) GetBidPrice_01() float32 {
	if x != nil {
		return x.BidPrice_01
	}
	return 0
}

func (x *CurrentMarket) GetBidVolume_01() float32 {
	if x != nil {
		return x.BidVolume_01
	}
	return 0
}

func (x *CurrentMarket) GetAskPrice_01() float32 {
	if x != nil {
		return x.AskPrice_01
	}
	return 0
}

func (x *CurrentMarket) GetAskVolume_01() float32 {
	if x != nil {
		return x.AskVolume_01
	}
	return 0
}

type CreateOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol     string  `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	MarketId   string  `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	AccountId  string  `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	OrderSide  string  `protobuf:"bytes,4,opt,name=order_side,json=orderSide,proto3" json:"order_side,omitempty"`
	OrderType  string  `protobuf:"bytes,5,opt,name=order_type,json=orderType,proto3" json:"order_type,omitempty"`
	OrderPrice float64 `protobuf:"fixed64,6,opt,name=order_price,json=orderPrice,proto3" json:"order_price,omitempty"`
	OrderQty   float64 `protobuf:"fixed64,7,opt,name=order_qty,json=orderQty,proto3" json:"order_qty,omitempty"`
	StopOrder  bool    `protobuf:"varint,8,opt,name=stop_order,json=stopOrder,proto3" json:"stop_order,omitempty"`
	StopPrice  float64 `protobuf:"fixed64,9,opt,name=stop_price,json=stopPrice,proto3" json:"stop_price,omitempty"`
	StopType   string  `protobuf:"bytes,10,opt,name=stop_type,json=stopType,proto3" json:"stop_type,omitempty"`
	StopStep   float64 `protobuf:"fixed64,11,opt,name=stop_step,json=stopStep,proto3" json:"stop_step,omitempty"`
	LossStep   float64 `protobuf:"fixed64,12,opt,name=loss_step,json=lossStep,proto3" json:"loss_step,omitempty"`
	ProfitStep float64 `protobuf:"fixed64,13,opt,name=profit_step,json=profitStep,proto3" json:"profit_step,omitempty"`
}

func (x *CreateOrderRequest) Reset() {
	*x = CreateOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderRequest) ProtoMessage() {}

func (x *CreateOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderRequest.ProtoReflect.Descriptor instead.
func (*CreateOrderRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{5}
}

func (x *CreateOrderRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *CreateOrderRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *CreateOrderRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CreateOrderRequest) GetOrderSide() string {
	if x != nil {
		return x.OrderSide
	}
	return ""
}

func (x *CreateOrderRequest) GetOrderType() string {
	if x != nil {
		return x.OrderType
	}
	return ""
}

func (x *CreateOrderRequest) GetOrderPrice() float64 {
	if x != nil {
		return x.OrderPrice
	}
	return 0
}

func (x *CreateOrderRequest) GetOrderQty() float64 {
	if x != nil {
		return x.OrderQty
	}
	return 0
}

func (x *CreateOrderRequest) GetStopOrder() bool {
	if x != nil {
		return x.StopOrder
	}
	return false
}

func (x *CreateOrderRequest) GetStopPrice() float64 {
	if x != nil {
		return x.StopPrice
	}
	return 0
}

func (x *CreateOrderRequest) GetStopType() string {
	if x != nil {
		return x.StopType
	}
	return ""
}

func (x *CreateOrderRequest) GetStopStep() float64 {
	if x != nil {
		return x.StopStep
	}
	return 0
}

func (x *CreateOrderRequest) GetLossStep() float64 {
	if x != nil {
		return x.LossStep
	}
	return 0
}

func (x *CreateOrderRequest) GetProfitStep() float64 {
	if x != nil {
		return x.ProfitStep
	}
	return 0
}

type CreateOrderReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool          `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Data    *CreatedOrder `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateOrderReply) Reset() {
	*x = CreateOrderReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrderReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderReply) ProtoMessage() {}

func (x *CreateOrderReply) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderReply.ProtoReflect.Descriptor instead.
func (*CreateOrderReply) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{6}
}

func (x *CreateOrderReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreateOrderReply) GetData() *CreatedOrder {
	if x != nil {
		return x.Data
	}
	return nil
}

// Cancel order
type CancelOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol     string  `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	MarketId   string  `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	AccountId  string  `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	OrderSide  string  `protobuf:"bytes,4,opt,name=order_side,json=orderSide,proto3" json:"order_side,omitempty"`
	OrderType  string  `protobuf:"bytes,5,opt,name=order_type,json=orderType,proto3" json:"order_type,omitempty"`
	OrderPrice float64 `protobuf:"fixed64,6,opt,name=order_price,json=orderPrice,proto3" json:"order_price,omitempty"`
	OrderQty   float64 `protobuf:"fixed64,7,opt,name=order_qty,json=orderQty,proto3" json:"order_qty,omitempty"`
	StopOrder  bool    `protobuf:"varint,8,opt,name=stop_order,json=stopOrder,proto3" json:"stop_order,omitempty"`
	StopPrice  float64 `protobuf:"fixed64,9,opt,name=stop_price,json=stopPrice,proto3" json:"stop_price,omitempty"`
	StopType   string  `protobuf:"bytes,10,opt,name=stop_type,json=stopType,proto3" json:"stop_type,omitempty"`
	StopStep   float64 `protobuf:"fixed64,11,opt,name=stop_step,json=stopStep,proto3" json:"stop_step,omitempty"`
	LossStep   float64 `protobuf:"fixed64,12,opt,name=loss_step,json=lossStep,proto3" json:"loss_step,omitempty"`
	ProfitStep float64 `protobuf:"fixed64,13,opt,name=profit_step,json=profitStep,proto3" json:"profit_step,omitempty"`
}

func (x *CancelOrderRequest) Reset() {
	*x = CancelOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelOrderRequest) ProtoMessage() {}

func (x *CancelOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelOrderRequest.ProtoReflect.Descriptor instead.
func (*CancelOrderRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{7}
}

func (x *CancelOrderRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *CancelOrderRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *CancelOrderRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CancelOrderRequest) GetOrderSide() string {
	if x != nil {
		return x.OrderSide
	}
	return ""
}

func (x *CancelOrderRequest) GetOrderType() string {
	if x != nil {
		return x.OrderType
	}
	return ""
}

func (x *CancelOrderRequest) GetOrderPrice() float64 {
	if x != nil {
		return x.OrderPrice
	}
	return 0
}

func (x *CancelOrderRequest) GetOrderQty() float64 {
	if x != nil {
		return x.OrderQty
	}
	return 0
}

func (x *CancelOrderRequest) GetStopOrder() bool {
	if x != nil {
		return x.StopOrder
	}
	return false
}

func (x *CancelOrderRequest) GetStopPrice() float64 {
	if x != nil {
		return x.StopPrice
	}
	return 0
}

func (x *CancelOrderRequest) GetStopType() string {
	if x != nil {
		return x.StopType
	}
	return ""
}

func (x *CancelOrderRequest) GetStopStep() float64 {
	if x != nil {
		return x.StopStep
	}
	return 0
}

func (x *CancelOrderRequest) GetLossStep() float64 {
	if x != nil {
		return x.LossStep
	}
	return 0
}

func (x *CancelOrderRequest) GetProfitStep() float64 {
	if x != nil {
		return x.ProfitStep
	}
	return 0
}

type CancelOrderReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool          `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Data    *CreatedOrder `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CancelOrderReply) Reset() {
	*x = CancelOrderReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelOrderReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelOrderReply) ProtoMessage() {}

func (x *CancelOrderReply) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelOrderReply.ProtoReflect.Descriptor instead.
func (*CancelOrderReply) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{8}
}

func (x *CancelOrderReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CancelOrderReply) GetData() *CreatedOrder {
	if x != nil {
		return x.Data
	}
	return nil
}

// Modify order
type ModifyOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol     string  `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	MarketId   string  `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	AccountId  string  `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	OrderSide  string  `protobuf:"bytes,4,opt,name=order_side,json=orderSide,proto3" json:"order_side,omitempty"`
	OrderType  string  `protobuf:"bytes,5,opt,name=order_type,json=orderType,proto3" json:"order_type,omitempty"`
	OrderPrice float64 `protobuf:"fixed64,6,opt,name=order_price,json=orderPrice,proto3" json:"order_price,omitempty"`
	OrderQty   float64 `protobuf:"fixed64,7,opt,name=order_qty,json=orderQty,proto3" json:"order_qty,omitempty"`
	StopOrder  bool    `protobuf:"varint,8,opt,name=stop_order,json=stopOrder,proto3" json:"stop_order,omitempty"`
	StopPrice  float64 `protobuf:"fixed64,9,opt,name=stop_price,json=stopPrice,proto3" json:"stop_price,omitempty"`
	StopType   string  `protobuf:"bytes,10,opt,name=stop_type,json=stopType,proto3" json:"stop_type,omitempty"`
	StopStep   float64 `protobuf:"fixed64,11,opt,name=stop_step,json=stopStep,proto3" json:"stop_step,omitempty"`
	LossStep   float64 `protobuf:"fixed64,12,opt,name=loss_step,json=lossStep,proto3" json:"loss_step,omitempty"`
	ProfitStep float64 `protobuf:"fixed64,13,opt,name=profit_step,json=profitStep,proto3" json:"profit_step,omitempty"`
	// new price, aty
	NewPrice float64 `protobuf:"fixed64,14,opt,name=new_price,json=newPrice,proto3" json:"new_price,omitempty"`
	NewQty   float64 `protobuf:"fixed64,15,opt,name=new_qty,json=newQty,proto3" json:"new_qty,omitempty"`
}

func (x *ModifyOrderRequest) Reset() {
	*x = ModifyOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyOrderRequest) ProtoMessage() {}

func (x *ModifyOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyOrderRequest.ProtoReflect.Descriptor instead.
func (*ModifyOrderRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{9}
}

func (x *ModifyOrderRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *ModifyOrderRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *ModifyOrderRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ModifyOrderRequest) GetOrderSide() string {
	if x != nil {
		return x.OrderSide
	}
	return ""
}

func (x *ModifyOrderRequest) GetOrderType() string {
	if x != nil {
		return x.OrderType
	}
	return ""
}

func (x *ModifyOrderRequest) GetOrderPrice() float64 {
	if x != nil {
		return x.OrderPrice
	}
	return 0
}

func (x *ModifyOrderRequest) GetOrderQty() float64 {
	if x != nil {
		return x.OrderQty
	}
	return 0
}

func (x *ModifyOrderRequest) GetStopOrder() bool {
	if x != nil {
		return x.StopOrder
	}
	return false
}

func (x *ModifyOrderRequest) GetStopPrice() float64 {
	if x != nil {
		return x.StopPrice
	}
	return 0
}

func (x *ModifyOrderRequest) GetStopType() string {
	if x != nil {
		return x.StopType
	}
	return ""
}

func (x *ModifyOrderRequest) GetStopStep() float64 {
	if x != nil {
		return x.StopStep
	}
	return 0
}

func (x *ModifyOrderRequest) GetLossStep() float64 {
	if x != nil {
		return x.LossStep
	}
	return 0
}

func (x *ModifyOrderRequest) GetProfitStep() float64 {
	if x != nil {
		return x.ProfitStep
	}
	return 0
}

func (x *ModifyOrderRequest) GetNewPrice() float64 {
	if x != nil {
		return x.NewPrice
	}
	return 0
}

func (x *ModifyOrderRequest) GetNewQty() float64 {
	if x != nil {
		return x.NewQty
	}
	return 0
}

type ModifyOrderReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool          `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Data    *CreatedOrder `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ModifyOrderReply) Reset() {
	*x = ModifyOrderReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyOrderReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyOrderReply) ProtoMessage() {}

func (x *ModifyOrderReply) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyOrderReply.ProtoReflect.Descriptor instead.
func (*ModifyOrderReply) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{10}
}

func (x *ModifyOrderReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ModifyOrderReply) GetData() *CreatedOrder {
	if x != nil {
		return x.Data
	}
	return nil
}

// Complete all defined TradingService
type GetAccountBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *GetAccountBalanceRequest) Reset() {
	*x = GetAccountBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountBalanceRequest) ProtoMessage() {}

func (x *GetAccountBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountBalanceRequest.ProtoReflect.Descriptor instead.
func (*GetAccountBalanceRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{11}
}

func (x *GetAccountBalanceRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type GetAccountBalanceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool            `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Data    *AccountBalance `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAccountBalanceReply) Reset() {
	*x = GetAccountBalanceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountBalanceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountBalanceReply) ProtoMessage() {}

func (x *GetAccountBalanceReply) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountBalanceReply.ProtoReflect.Descriptor instead.
func (*GetAccountBalanceReply) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{12}
}

func (x *GetAccountBalanceReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetAccountBalanceReply) GetData() *AccountBalance {
	if x != nil {
		return x.Data
	}
	return nil
}

// GetMaxBySellQty
// symbol, price, order_side
type GetMaxBySellQtyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol    string  `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Price     float64 `protobuf:"fixed64,2,opt,name=price,proto3" json:"price,omitempty"`
	OrderSide string  `protobuf:"bytes,3,opt,name=order_side,json=orderSide,proto3" json:"order_side,omitempty"`
}

func (x *GetMaxBySellQtyRequest) Reset() {
	*x = GetMaxBySellQtyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMaxBySellQtyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMaxBySellQtyRequest) ProtoMessage() {}

func (x *GetMaxBySellQtyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMaxBySellQtyRequest.ProtoReflect.Descriptor instead.
func (*GetMaxBySellQtyRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{13}
}

func (x *GetMaxBySellQtyRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *GetMaxBySellQtyRequest) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *GetMaxBySellQtyRequest) GetOrderSide() string {
	if x != nil {
		return x.OrderSide
	}
	return ""
}

type GetMaxBySellQtyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool           `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Data    *MaxBuySellQty `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetMaxBySellQtyReply) Reset() {
	*x = GetMaxBySellQtyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMaxBySellQtyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMaxBySellQtyReply) ProtoMessage() {}

func (x *GetMaxBySellQtyReply) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMaxBySellQtyReply.ProtoReflect.Descriptor instead.
func (*GetMaxBySellQtyReply) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{14}
}

func (x *GetMaxBySellQtyReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetMaxBySellQtyReply) GetData() *MaxBuySellQty {
	if x != nil {
		return x.Data
	}
	return nil
}

// positions
type GetOpenPositionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *GetOpenPositionsRequest) Reset() {
	*x = GetOpenPositionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOpenPositionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOpenPositionsRequest) ProtoMessage() {}

func (x *GetOpenPositionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOpenPositionsRequest.ProtoReflect.Descriptor instead.
func (*GetOpenPositionsRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{15}
}

func (x *GetOpenPositionsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type GetOpenPositionsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                      `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Data    map[string]*StockPosition `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetOpenPositionsReply) Reset() {
	*x = GetOpenPositionsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOpenPositionsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOpenPositionsReply) ProtoMessage() {}

func (x *GetOpenPositionsReply) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOpenPositionsReply.ProtoReflect.Descriptor instead.
func (*GetOpenPositionsReply) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{16}
}

func (x *GetOpenPositionsReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetOpenPositionsReply) GetData() map[string]*StockPosition {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetClosedPositionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *GetClosedPositionsRequest) Reset() {
	*x = GetClosedPositionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClosedPositionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClosedPositionsRequest) ProtoMessage() {}

func (x *GetClosedPositionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClosedPositionsRequest.ProtoReflect.Descriptor instead.
func (*GetClosedPositionsRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{17}
}

func (x *GetClosedPositionsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type GetClosedPositionsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                      `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Data    map[string]*StockPosition `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetClosedPositionsReply) Reset() {
	*x = GetClosedPositionsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClosedPositionsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClosedPositionsReply) ProtoMessage() {}

func (x *GetClosedPositionsReply) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClosedPositionsReply.ProtoReflect.Descriptor instead.
func (*GetClosedPositionsReply) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{18}
}

func (x *GetClosedPositionsReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetClosedPositionsReply) GetData() map[string]*StockPosition {
	if x != nil {
		return x.Data
	}
	return nil
}

// Position by symbol
type GetOpenPositionBySymbolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Symbol    string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *GetOpenPositionBySymbolRequest) Reset() {
	*x = GetOpenPositionBySymbolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOpenPositionBySymbolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOpenPositionBySymbolRequest) ProtoMessage() {}

func (x *GetOpenPositionBySymbolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOpenPositionBySymbolRequest.ProtoReflect.Descriptor instead.
func (*GetOpenPositionBySymbolRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{19}
}

func (x *GetOpenPositionBySymbolRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GetOpenPositionBySymbolRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type GetOpenPositionBySymbolReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool           `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Data    *StockPosition `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetOpenPositionBySymbolReply) Reset() {
	*x = GetOpenPositionBySymbolReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOpenPositionBySymbolReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOpenPositionBySymbolReply) ProtoMessage() {}

func (x *GetOpenPositionBySymbolReply) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOpenPositionBySymbolReply.ProtoReflect.Descriptor instead.
func (*GetOpenPositionBySymbolReply) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{20}
}

func (x *GetOpenPositionBySymbolReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetOpenPositionBySymbolReply) GetData() *StockPosition {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetClosedPositionBySymbolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Symbol    string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *GetClosedPositionBySymbolRequest) Reset() {
	*x = GetClosedPositionBySymbolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClosedPositionBySymbolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClosedPositionBySymbolRequest) ProtoMessage() {}

func (x *GetClosedPositionBySymbolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClosedPositionBySymbolRequest.ProtoReflect.Descriptor instead.
func (*GetClosedPositionBySymbolRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{21}
}

func (x *GetClosedPositionBySymbolRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GetClosedPositionBySymbolRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type GetClosedPositionBySymbolReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool           `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Data    *StockPosition `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetClosedPositionBySymbolReply) Reset() {
	*x = GetClosedPositionBySymbolReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClosedPositionBySymbolReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClosedPositionBySymbolReply) ProtoMessage() {}

func (x *GetClosedPositionBySymbolReply) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClosedPositionBySymbolReply.ProtoReflect.Descriptor instead.
func (*GetClosedPositionBySymbolReply) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{22}
}

func (x *GetClosedPositionBySymbolReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetClosedPositionBySymbolReply) GetData() *StockPosition {
	if x != nil {
		return x.Data
	}
	return nil
}

// Order history
type GetOrderHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId   string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	OrderStatus string `protobuf:"bytes,2,opt,name=order_status,json=orderStatus,proto3" json:"order_status,omitempty"`
	StartDate   string `protobuf:"bytes,3,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate     string `protobuf:"bytes,4,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Page        int32  `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
	PageSize    int32  `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *GetOrderHistoryRequest) Reset() {
	*x = GetOrderHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderHistoryRequest) ProtoMessage() {}

func (x *GetOrderHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetOrderHistoryRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{23}
}

func (x *GetOrderHistoryRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GetOrderHistoryRequest) GetOrderStatus() string {
	if x != nil {
		return x.OrderStatus
	}
	return ""
}

func (x *GetOrderHistoryRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *GetOrderHistoryRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *GetOrderHistoryRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetOrderHistoryRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetOrderHistoryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool            `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Data    []*CreatedOrder `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetOrderHistoryReply) Reset() {
	*x = GetOrderHistoryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderHistoryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderHistoryReply) ProtoMessage() {}

func (x *GetOrderHistoryReply) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderHistoryReply.ProtoReflect.Descriptor instead.
func (*GetOrderHistoryReply) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{24}
}

func (x *GetOrderHistoryReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetOrderHistoryReply) GetData() []*CreatedOrder {
	if x != nil {
		return x.Data
	}
	return nil
}

// Pending orders
type GetPendingOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *GetPendingOrdersRequest) Reset() {
	*x = GetPendingOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPendingOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPendingOrdersRequest) ProtoMessage() {}

func (x *GetPendingOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPendingOrdersRequest.ProtoReflect.Descriptor instead.
func (*GetPendingOrdersRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{25}
}

func (x *GetPendingOrdersRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type GetPendingOrdersReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool            `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Data    []*CreatedOrder `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetPendingOrdersReply) Reset() {
	*x = GetPendingOrdersReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPendingOrdersReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPendingOrdersReply) ProtoMessage() {}

func (x *GetPendingOrdersReply) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPendingOrdersReply.ProtoReflect.Descriptor instead.
func (*GetPendingOrdersReply) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{26}
}

func (x *GetPendingOrdersReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetPendingOrdersReply) GetData() []*CreatedOrder {
	if x != nil {
		return x.Data
	}
	return nil
}

// Get filled orders
type GetFilledOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *GetFilledOrdersRequest) Reset() {
	*x = GetFilledOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFilledOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFilledOrdersRequest) ProtoMessage() {}

func (x *GetFilledOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFilledOrdersRequest.ProtoReflect.Descriptor instead.
func (*GetFilledOrdersRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{27}
}

func (x *GetFilledOrdersRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type GetFilledOrdersReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool            `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Data    []*CreatedOrder `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetFilledOrdersReply) Reset() {
	*x = GetFilledOrdersReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFilledOrdersReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFilledOrdersReply) ProtoMessage() {}

func (x *GetFilledOrdersReply) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFilledOrdersReply.ProtoReflect.Descriptor instead.
func (*GetFilledOrdersReply) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{28}
}

func (x *GetFilledOrdersReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetFilledOrdersReply) GetData() []*CreatedOrder {
	if x != nil {
		return x.Data
	}
	return nil
}

// Get GetPortfolio like position by return a list of StockPosition
type GetPortfolioRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *GetPortfolioRequest) Reset() {
	*x = GetPortfolioRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPortfolioRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPortfolioRequest) ProtoMessage() {}

func (x *GetPortfolioRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPortfolioRequest.ProtoReflect.Descriptor instead.
func (*GetPortfolioRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{29}
}

func (x *GetPortfolioRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type GetPortfolioReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool             `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Data    []*StockPosition `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetPortfolioReply) Reset() {
	*x = GetPortfolioReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPortfolioReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPortfolioReply) ProtoMessage() {}

func (x *GetPortfolioReply) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPortfolioReply.ProtoReflect.Descriptor instead.
func (*GetPortfolioReply) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{30}
}

func (x *GetPortfolioReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetPortfolioReply) GetData() []*StockPosition {
	if x != nil {
		return x.Data
	}
	return nil
}

// Get current price
type GetCurrentPriceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *GetCurrentPriceRequest) Reset() {
	*x = GetCurrentPriceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentPriceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentPriceRequest) ProtoMessage() {}

func (x *GetCurrentPriceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentPriceRequest.ProtoReflect.Descriptor instead.
func (*GetCurrentPriceRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{31}
}

func (x *GetCurrentPriceRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type GetCurrentPriceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool           `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Data    *CurrentMarket `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetCurrentPriceReply) Reset() {
	*x = GetCurrentPriceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentPriceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentPriceReply) ProtoMessage() {}

func (x *GetCurrentPriceReply) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentPriceReply.ProtoReflect.Descriptor instead.
func (*GetCurrentPriceReply) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{32}
}

func (x *GetCurrentPriceReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetCurrentPriceReply) GetData() *CurrentMarket {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_service_proto protoreflect.FileDescriptor

var file_service_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x08, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x72, 0x61, 0x79, 0x22, 0xd5, 0x02, 0x0a, 0x0e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50,
	0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6c, 0x12, 0x0e, 0x0a,
	0x02, 0x65, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x65, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6e, 0x61, 0x76, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6e, 0x61, 0x76, 0x12,
	0x22, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xa5, 0x04, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x73, 0x69, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x69, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x71,
	0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x51,
	0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x74, 0x6f, 0x70, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x73, 0x74, 0x6f, 0x70, 0x53, 0x74, 0x65, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x73, 0x73,
	0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x6f, 0x73,
	0x73, 0x53, 0x74, 0x65, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f,
	0x73, 0x74, 0x65, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x53, 0x74, 0x65, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x67, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x76, 0x67, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x73, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x6f, 0x73, 0x51, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69,
	0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x51, 0x74, 0x79, 0x22, 0x92, 0x01, 0x0a, 0x0d, 0x4d, 0x61,
	0x78, 0x42, 0x75, 0x79, 0x53, 0x65, 0x6c, 0x6c, 0x51, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12,
	0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6d, 0x61, 0x78, 0x51, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x22, 0xff,
	0x01, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c,
	0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x61, 0x76, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x22, 0xea, 0x04, 0x0a, 0x0d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x72, 0x65, 0x66, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x65, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x63, 0x65, 0x69, 0x6c,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x6f,
	0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x66,
	0x6c, 0x6f, 0x6f, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x70, 0x65,
	0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6f,
	0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x69, 0x67, 0x68,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x68, 0x69,
	0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x77, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x61, 0x76, 0x67, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x30,
	0x31, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x62, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x30, 0x31, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x69, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x5f, 0x30, 0x31, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x62, 0x69, 0x64, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x30, 0x31, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x73, 0x6b, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x30, 0x31, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x61,
	0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x30, 0x31, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x73, 0x6b,
	0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x30, 0x31, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0b, 0x61, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x30, 0x31, 0x22, 0x9a, 0x03,
	0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x71, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x51, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x53, 0x74, 0x65, 0x70, 0x12, 0x1b, 0x0a, 0x09,
	0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x6c, 0x6f, 0x73, 0x73, 0x53, 0x74, 0x65, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x53, 0x74, 0x65, 0x70, 0x22, 0x58, 0x0a, 0x10, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x72, 0x61,
	0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x9a, 0x03, 0x0a, 0x12, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x6f, 0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x73, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x6f, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x73, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x6f,
	0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74,
	0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x73,
	0x74, 0x65, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x53,
	0x74, 0x65, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x65, 0x70,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x6f, 0x73, 0x73, 0x53, 0x74, 0x65, 0x70,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x53, 0x74, 0x65,
	0x70, 0x22, 0x58, 0x0a, 0x10, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x5f, 0x72, 0x61, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd0, 0x03, 0x0a, 0x12,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x73, 0x69, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x69, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x71,
	0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x51,
	0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x53, 0x74, 0x65, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f,
	0x73, 0x73, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c,
	0x6f, 0x73, 0x73, 0x53, 0x74, 0x65, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x53, 0x74, 0x65, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6e, 0x65, 0x77,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x5f, 0x71, 0x74, 0x79,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x51, 0x74, 0x79, 0x22, 0x58,
	0x0a, 0x10, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x5f, 0x72, 0x61, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x39, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0x60, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x72, 0x61, 0x79,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x65, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x78, 0x42,
	0x79, 0x53, 0x65, 0x6c, 0x6c, 0x51, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x22, 0x5d, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x4d, 0x61, 0x78, 0x42, 0x79, 0x53, 0x65, 0x6c, 0x6c, 0x51, 0x74, 0x79, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2b,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x5f, 0x72, 0x61, 0x79, 0x2e, 0x4d, 0x61, 0x78, 0x42, 0x75, 0x79, 0x53, 0x65,
	0x6c, 0x6c, 0x51, 0x74, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x38, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xc2, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65,
	0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x72,
	0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x50, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x72, 0x61,
	0x79, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3a, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xc6, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3f, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x5f, 0x72, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x50, 0x0a,
	0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x5f, 0x72, 0x61, 0x79, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x57, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x79, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0x65, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4f,
	0x70, 0x65, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x72, 0x61, 0x79, 0x2e, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x59, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0x67, 0x0a, 0x1e, 0x47, 0x65,
	0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x79, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x72, 0x61, 0x79, 0x2e,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xc5, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x5c, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x5f, 0x72, 0x61, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x38, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x72, 0x61, 0x79, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x37, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x5c, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x46, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x5f, 0x72, 0x61, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x34, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0x5a, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2b,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x5f, 0x72, 0x61, 0x79, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x30, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0x5d, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x5f, 0x72, 0x61, 0x79, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0xd2, 0x09, 0x0a,
	0x0e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x47, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1c,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x72, 0x61, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x5f, 0x72, 0x61, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x47, 0x0a, 0x0b, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x72,
	0x61, 0x79, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x72, 0x61, 0x79,
	0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x47, 0x0a, 0x0b, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x1c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x72, 0x61, 0x79, 0x2e, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x72, 0x61, 0x79, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x59, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x22, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x72, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x72, 0x61, 0x79, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x53, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x78, 0x42,
	0x79, 0x53, 0x65, 0x6c, 0x6c, 0x51, 0x74, 0x79, 0x12, 0x20, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f,
	0x72, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x78, 0x42, 0x79, 0x53, 0x65, 0x6c, 0x6c,
	0x51, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x5f, 0x72, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x78, 0x42, 0x79, 0x53, 0x65,
	0x6c, 0x6c, 0x51, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x53, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x5f, 0x72, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x72, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x56, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x21, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x72, 0x61, 0x79, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x72, 0x61,
	0x79, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x53, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x46, 0x69,
	0x6c, 0x6c, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x20, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x5f, 0x72, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x5f, 0x72, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x6c, 0x65,
	0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4a, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x12, 0x1d, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x5f, 0x72, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x66,
	0x6f, 0x6c, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x5f, 0x72, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f,
	0x6c, 0x69, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x56, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4f,
	0x70, 0x65, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x5f, 0x72, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x72, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70,
	0x65, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x6b, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x79, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x28, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x5f, 0x72, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x72, 0x61, 0x79,
	0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x79, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5b, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x23, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x72, 0x61, 0x79, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x72,
	0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x70, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x2a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x72, 0x61,
	0x79, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x79, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x72, 0x61, 0x79, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x79, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x53, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x20, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x72, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x72, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_proto_rawDescOnce sync.Once
	file_service_proto_rawDescData = file_service_proto_rawDesc
)

func file_service_proto_rawDescGZIP() []byte {
	file_service_proto_rawDescOnce.Do(func() {
		file_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_proto_rawDescData)
	})
	return file_service_proto_rawDescData
}

var file_service_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_service_proto_goTypes = []interface{}{
	(*AccountBalance)(nil),                   // 0: grpc_ray.AccountBalance
	(*CreatedOrder)(nil),                     // 1: grpc_ray.CreatedOrder
	(*MaxBuySellQty)(nil),                    // 2: grpc_ray.MaxBuySellQty
	(*StockPosition)(nil),                    // 3: grpc_ray.StockPosition
	(*CurrentMarket)(nil),                    // 4: grpc_ray.CurrentMarket
	(*CreateOrderRequest)(nil),               // 5: grpc_ray.CreateOrderRequest
	(*CreateOrderReply)(nil),                 // 6: grpc_ray.CreateOrderReply
	(*CancelOrderRequest)(nil),               // 7: grpc_ray.CancelOrderRequest
	(*CancelOrderReply)(nil),                 // 8: grpc_ray.CancelOrderReply
	(*ModifyOrderRequest)(nil),               // 9: grpc_ray.ModifyOrderRequest
	(*ModifyOrderReply)(nil),                 // 10: grpc_ray.ModifyOrderReply
	(*GetAccountBalanceRequest)(nil),         // 11: grpc_ray.GetAccountBalanceRequest
	(*GetAccountBalanceReply)(nil),           // 12: grpc_ray.GetAccountBalanceReply
	(*GetMaxBySellQtyRequest)(nil),           // 13: grpc_ray.GetMaxBySellQtyRequest
	(*GetMaxBySellQtyReply)(nil),             // 14: grpc_ray.GetMaxBySellQtyReply
	(*GetOpenPositionsRequest)(nil),          // 15: grpc_ray.GetOpenPositionsRequest
	(*GetOpenPositionsReply)(nil),            // 16: grpc_ray.GetOpenPositionsReply
	(*GetClosedPositionsRequest)(nil),        // 17: grpc_ray.GetClosedPositionsRequest
	(*GetClosedPositionsReply)(nil),          // 18: grpc_ray.GetClosedPositionsReply
	(*GetOpenPositionBySymbolRequest)(nil),   // 19: grpc_ray.GetOpenPositionBySymbolRequest
	(*GetOpenPositionBySymbolReply)(nil),     // 20: grpc_ray.GetOpenPositionBySymbolReply
	(*GetClosedPositionBySymbolRequest)(nil), // 21: grpc_ray.GetClosedPositionBySymbolRequest
	(*GetClosedPositionBySymbolReply)(nil),   // 22: grpc_ray.GetClosedPositionBySymbolReply
	(*GetOrderHistoryRequest)(nil),           // 23: grpc_ray.GetOrderHistoryRequest
	(*GetOrderHistoryReply)(nil),             // 24: grpc_ray.GetOrderHistoryReply
	(*GetPendingOrdersRequest)(nil),          // 25: grpc_ray.GetPendingOrdersRequest
	(*GetPendingOrdersReply)(nil),            // 26: grpc_ray.GetPendingOrdersReply
	(*GetFilledOrdersRequest)(nil),           // 27: grpc_ray.GetFilledOrdersRequest
	(*GetFilledOrdersReply)(nil),             // 28: grpc_ray.GetFilledOrdersReply
	(*GetPortfolioRequest)(nil),              // 29: grpc_ray.GetPortfolioRequest
	(*GetPortfolioReply)(nil),                // 30: grpc_ray.GetPortfolioReply
	(*GetCurrentPriceRequest)(nil),           // 31: grpc_ray.GetCurrentPriceRequest
	(*GetCurrentPriceReply)(nil),             // 32: grpc_ray.GetCurrentPriceReply
	nil,                                      // 33: grpc_ray.GetOpenPositionsReply.DataEntry
	nil,                                      // 34: grpc_ray.GetClosedPositionsReply.DataEntry
}
var file_service_proto_depIdxs = []int32{
	1,  // 0: grpc_ray.CreateOrderReply.data:type_name -> grpc_ray.CreatedOrder
	1,  // 1: grpc_ray.CancelOrderReply.data:type_name -> grpc_ray.CreatedOrder
	1,  // 2: grpc_ray.ModifyOrderReply.data:type_name -> grpc_ray.CreatedOrder
	0,  // 3: grpc_ray.GetAccountBalanceReply.data:type_name -> grpc_ray.AccountBalance
	2,  // 4: grpc_ray.GetMaxBySellQtyReply.data:type_name -> grpc_ray.MaxBuySellQty
	33, // 5: grpc_ray.GetOpenPositionsReply.data:type_name -> grpc_ray.GetOpenPositionsReply.DataEntry
	34, // 6: grpc_ray.GetClosedPositionsReply.data:type_name -> grpc_ray.GetClosedPositionsReply.DataEntry
	3,  // 7: grpc_ray.GetOpenPositionBySymbolReply.data:type_name -> grpc_ray.StockPosition
	3,  // 8: grpc_ray.GetClosedPositionBySymbolReply.data:type_name -> grpc_ray.StockPosition
	1,  // 9: grpc_ray.GetOrderHistoryReply.data:type_name -> grpc_ray.CreatedOrder
	1,  // 10: grpc_ray.GetPendingOrdersReply.data:type_name -> grpc_ray.CreatedOrder
	1,  // 11: grpc_ray.GetFilledOrdersReply.data:type_name -> grpc_ray.CreatedOrder
	3,  // 12: grpc_ray.GetPortfolioReply.data:type_name -> grpc_ray.StockPosition
	4,  // 13: grpc_ray.GetCurrentPriceReply.data:type_name -> grpc_ray.CurrentMarket
	3,  // 14: grpc_ray.GetOpenPositionsReply.DataEntry.value:type_name -> grpc_ray.StockPosition
	3,  // 15: grpc_ray.GetClosedPositionsReply.DataEntry.value:type_name -> grpc_ray.StockPosition
	5,  // 16: grpc_ray.TradingService.CreateOrder:input_type -> grpc_ray.CreateOrderRequest
	7,  // 17: grpc_ray.TradingService.CancelOrder:input_type -> grpc_ray.CancelOrderRequest
	9,  // 18: grpc_ray.TradingService.ModifyOrder:input_type -> grpc_ray.ModifyOrderRequest
	11, // 19: grpc_ray.TradingService.GetAccountBalance:input_type -> grpc_ray.GetAccountBalanceRequest
	13, // 20: grpc_ray.TradingService.GetMaxBySellQty:input_type -> grpc_ray.GetMaxBySellQtyRequest
	23, // 21: grpc_ray.TradingService.GetOrderHistory:input_type -> grpc_ray.GetOrderHistoryRequest
	25, // 22: grpc_ray.TradingService.GetPendingOrders:input_type -> grpc_ray.GetPendingOrdersRequest
	27, // 23: grpc_ray.TradingService.GetFilledOrders:input_type -> grpc_ray.GetFilledOrdersRequest
	29, // 24: grpc_ray.TradingService.GetPortfolio:input_type -> grpc_ray.GetPortfolioRequest
	15, // 25: grpc_ray.TradingService.GetOpenPositions:input_type -> grpc_ray.GetOpenPositionsRequest
	19, // 26: grpc_ray.TradingService.GetOpenPositionBySymbol:input_type -> grpc_ray.GetOpenPositionBySymbolRequest
	17, // 27: grpc_ray.TradingService.GetClosePositions:input_type -> grpc_ray.GetClosedPositionsRequest
	21, // 28: grpc_ray.TradingService.GetClosePositionBySymbol:input_type -> grpc_ray.GetClosedPositionBySymbolRequest
	31, // 29: grpc_ray.TradingService.GetCurrentPrice:input_type -> grpc_ray.GetCurrentPriceRequest
	6,  // 30: grpc_ray.TradingService.CreateOrder:output_type -> grpc_ray.CreateOrderReply
	8,  // 31: grpc_ray.TradingService.CancelOrder:output_type -> grpc_ray.CancelOrderReply
	10, // 32: grpc_ray.TradingService.ModifyOrder:output_type -> grpc_ray.ModifyOrderReply
	12, // 33: grpc_ray.TradingService.GetAccountBalance:output_type -> grpc_ray.GetAccountBalanceReply
	14, // 34: grpc_ray.TradingService.GetMaxBySellQty:output_type -> grpc_ray.GetMaxBySellQtyReply
	24, // 35: grpc_ray.TradingService.GetOrderHistory:output_type -> grpc_ray.GetOrderHistoryReply
	26, // 36: grpc_ray.TradingService.GetPendingOrders:output_type -> grpc_ray.GetPendingOrdersReply
	28, // 37: grpc_ray.TradingService.GetFilledOrders:output_type -> grpc_ray.GetFilledOrdersReply
	30, // 38: grpc_ray.TradingService.GetPortfolio:output_type -> grpc_ray.GetPortfolioReply
	16, // 39: grpc_ray.TradingService.GetOpenPositions:output_type -> grpc_ray.GetOpenPositionsReply
	20, // 40: grpc_ray.TradingService.GetOpenPositionBySymbol:output_type -> grpc_ray.GetOpenPositionBySymbolReply
	18, // 41: grpc_ray.TradingService.GetClosePositions:output_type -> grpc_ray.GetClosedPositionsReply
	22, // 42: grpc_ray.TradingService.GetClosePositionBySymbol:output_type -> grpc_ray.GetClosedPositionBySymbolReply
	32, // 43: grpc_ray.TradingService.GetCurrentPrice:output_type -> grpc_ray.GetCurrentPriceReply
	30, // [30:44] is the sub-list for method output_type
	16, // [16:30] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_service_proto_init() }
func file_service_proto_init() {
	if File_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatedOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxBuySellQty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrentMarket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrderReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelOrderReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyOrderReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountBalanceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMaxBySellQtyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMaxBySellQtyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOpenPositionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOpenPositionsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClosedPositionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClosedPositionsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOpenPositionBySymbolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOpenPositionBySymbolReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClosedPositionBySymbolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClosedPositionBySymbolReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderHistoryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPendingOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPendingOrdersReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFilledOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFilledOrdersReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPortfolioRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPortfolioReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrentPriceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrentPriceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_proto_goTypes,
		DependencyIndexes: file_service_proto_depIdxs,
		MessageInfos:      file_service_proto_msgTypes,
	}.Build()
	File_service_proto = out.File
	file_service_proto_rawDesc = nil
	file_service_proto_goTypes = nil
	file_service_proto_depIdxs = nil
}
