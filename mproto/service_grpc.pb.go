// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc_ray

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TradingServiceClient is the client API for TradingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TradingServiceClient interface {
	// CreateOrder, CancelOrder, ModifyOrder
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderReply, error)
	CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*CancelOrderReply, error)
	ModifyOrder(ctx context.Context, in *ModifyOrderRequest, opts ...grpc.CallOption) (*ModifyOrderReply, error)
	// GetAccountBalance
	GetAccountBalance(ctx context.Context, in *GetAccountBalanceRequest, opts ...grpc.CallOption) (*GetAccountBalanceReply, error)
	// GetMaxBySellQty
	GetMaxBySellQty(ctx context.Context, in *GetMaxBySellQtyRequest, opts ...grpc.CallOption) (*GetMaxBySellQtyReply, error)
	// GetOrderHistory
	GetOrderHistory(ctx context.Context, in *GetOrderHistoryRequest, opts ...grpc.CallOption) (*GetOrderHistoryReply, error)
	// GetPendingOrders
	GetPendingOrders(ctx context.Context, in *GetPendingOrdersRequest, opts ...grpc.CallOption) (*GetPendingOrdersReply, error)
	// GetFilledOrders
	GetFilledOrders(ctx context.Context, in *GetFilledOrdersRequest, opts ...grpc.CallOption) (*GetFilledOrdersReply, error)
	// GetPortfolio
	GetPortfolio(ctx context.Context, in *GetPortfolioRequest, opts ...grpc.CallOption) (*GetPortfolioReply, error)
	// GetOpenPositions
	GetOpenPositions(ctx context.Context, in *GetOpenPositionsRequest, opts ...grpc.CallOption) (*GetOpenPositionsReply, error)
	// GetPositionBySymbol
	GetOpenPositionBySymbol(ctx context.Context, in *GetOpenPositionBySymbolRequest, opts ...grpc.CallOption) (*GetOpenPositionBySymbolReply, error)
	// GetClosePositions
	GetClosePositions(ctx context.Context, in *GetClosedPositionsRequest, opts ...grpc.CallOption) (*GetClosedPositionsReply, error)
	// GetClosePositionBySymbol
	GetClosePositionBySymbol(ctx context.Context, in *GetClosedPositionBySymbolRequest, opts ...grpc.CallOption) (*GetClosedPositionBySymbolReply, error)
	// GetCurrentPrice
	GetCurrentPrice(ctx context.Context, in *GetCurrentPriceRequest, opts ...grpc.CallOption) (*GetCurrentPriceReply, error)
}

type tradingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTradingServiceClient(cc grpc.ClientConnInterface) TradingServiceClient {
	return &tradingServiceClient{cc}
}

func (c *tradingServiceClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderReply, error) {
	out := new(CreateOrderReply)
	err := c.cc.Invoke(ctx, "/grpc_ray.TradingService/CreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceClient) CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*CancelOrderReply, error) {
	out := new(CancelOrderReply)
	err := c.cc.Invoke(ctx, "/grpc_ray.TradingService/CancelOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceClient) ModifyOrder(ctx context.Context, in *ModifyOrderRequest, opts ...grpc.CallOption) (*ModifyOrderReply, error) {
	out := new(ModifyOrderReply)
	err := c.cc.Invoke(ctx, "/grpc_ray.TradingService/ModifyOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceClient) GetAccountBalance(ctx context.Context, in *GetAccountBalanceRequest, opts ...grpc.CallOption) (*GetAccountBalanceReply, error) {
	out := new(GetAccountBalanceReply)
	err := c.cc.Invoke(ctx, "/grpc_ray.TradingService/GetAccountBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceClient) GetMaxBySellQty(ctx context.Context, in *GetMaxBySellQtyRequest, opts ...grpc.CallOption) (*GetMaxBySellQtyReply, error) {
	out := new(GetMaxBySellQtyReply)
	err := c.cc.Invoke(ctx, "/grpc_ray.TradingService/GetMaxBySellQty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceClient) GetOrderHistory(ctx context.Context, in *GetOrderHistoryRequest, opts ...grpc.CallOption) (*GetOrderHistoryReply, error) {
	out := new(GetOrderHistoryReply)
	err := c.cc.Invoke(ctx, "/grpc_ray.TradingService/GetOrderHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceClient) GetPendingOrders(ctx context.Context, in *GetPendingOrdersRequest, opts ...grpc.CallOption) (*GetPendingOrdersReply, error) {
	out := new(GetPendingOrdersReply)
	err := c.cc.Invoke(ctx, "/grpc_ray.TradingService/GetPendingOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceClient) GetFilledOrders(ctx context.Context, in *GetFilledOrdersRequest, opts ...grpc.CallOption) (*GetFilledOrdersReply, error) {
	out := new(GetFilledOrdersReply)
	err := c.cc.Invoke(ctx, "/grpc_ray.TradingService/GetFilledOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceClient) GetPortfolio(ctx context.Context, in *GetPortfolioRequest, opts ...grpc.CallOption) (*GetPortfolioReply, error) {
	out := new(GetPortfolioReply)
	err := c.cc.Invoke(ctx, "/grpc_ray.TradingService/GetPortfolio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceClient) GetOpenPositions(ctx context.Context, in *GetOpenPositionsRequest, opts ...grpc.CallOption) (*GetOpenPositionsReply, error) {
	out := new(GetOpenPositionsReply)
	err := c.cc.Invoke(ctx, "/grpc_ray.TradingService/GetOpenPositions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceClient) GetOpenPositionBySymbol(ctx context.Context, in *GetOpenPositionBySymbolRequest, opts ...grpc.CallOption) (*GetOpenPositionBySymbolReply, error) {
	out := new(GetOpenPositionBySymbolReply)
	err := c.cc.Invoke(ctx, "/grpc_ray.TradingService/GetOpenPositionBySymbol", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceClient) GetClosePositions(ctx context.Context, in *GetClosedPositionsRequest, opts ...grpc.CallOption) (*GetClosedPositionsReply, error) {
	out := new(GetClosedPositionsReply)
	err := c.cc.Invoke(ctx, "/grpc_ray.TradingService/GetClosePositions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceClient) GetClosePositionBySymbol(ctx context.Context, in *GetClosedPositionBySymbolRequest, opts ...grpc.CallOption) (*GetClosedPositionBySymbolReply, error) {
	out := new(GetClosedPositionBySymbolReply)
	err := c.cc.Invoke(ctx, "/grpc_ray.TradingService/GetClosePositionBySymbol", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceClient) GetCurrentPrice(ctx context.Context, in *GetCurrentPriceRequest, opts ...grpc.CallOption) (*GetCurrentPriceReply, error) {
	out := new(GetCurrentPriceReply)
	err := c.cc.Invoke(ctx, "/grpc_ray.TradingService/GetCurrentPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TradingServiceServer is the server API for TradingService service.
// All implementations must embed UnimplementedTradingServiceServer
// for forward compatibility
type TradingServiceServer interface {
	// CreateOrder, CancelOrder, ModifyOrder
	CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderReply, error)
	CancelOrder(context.Context, *CancelOrderRequest) (*CancelOrderReply, error)
	ModifyOrder(context.Context, *ModifyOrderRequest) (*ModifyOrderReply, error)
	// GetAccountBalance
	GetAccountBalance(context.Context, *GetAccountBalanceRequest) (*GetAccountBalanceReply, error)
	// GetMaxBySellQty
	GetMaxBySellQty(context.Context, *GetMaxBySellQtyRequest) (*GetMaxBySellQtyReply, error)
	// GetOrderHistory
	GetOrderHistory(context.Context, *GetOrderHistoryRequest) (*GetOrderHistoryReply, error)
	// GetPendingOrders
	GetPendingOrders(context.Context, *GetPendingOrdersRequest) (*GetPendingOrdersReply, error)
	// GetFilledOrders
	GetFilledOrders(context.Context, *GetFilledOrdersRequest) (*GetFilledOrdersReply, error)
	// GetPortfolio
	GetPortfolio(context.Context, *GetPortfolioRequest) (*GetPortfolioReply, error)
	// GetOpenPositions
	GetOpenPositions(context.Context, *GetOpenPositionsRequest) (*GetOpenPositionsReply, error)
	// GetPositionBySymbol
	GetOpenPositionBySymbol(context.Context, *GetOpenPositionBySymbolRequest) (*GetOpenPositionBySymbolReply, error)
	// GetClosePositions
	GetClosePositions(context.Context, *GetClosedPositionsRequest) (*GetClosedPositionsReply, error)
	// GetClosePositionBySymbol
	GetClosePositionBySymbol(context.Context, *GetClosedPositionBySymbolRequest) (*GetClosedPositionBySymbolReply, error)
	// GetCurrentPrice
	GetCurrentPrice(context.Context, *GetCurrentPriceRequest) (*GetCurrentPriceReply, error)
	mustEmbedUnimplementedTradingServiceServer()
}

// UnimplementedTradingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTradingServiceServer struct {
}

func (UnimplementedTradingServiceServer) CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedTradingServiceServer) CancelOrder(context.Context, *CancelOrderRequest) (*CancelOrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (UnimplementedTradingServiceServer) ModifyOrder(context.Context, *ModifyOrderRequest) (*ModifyOrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyOrder not implemented")
}
func (UnimplementedTradingServiceServer) GetAccountBalance(context.Context, *GetAccountBalanceRequest) (*GetAccountBalanceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountBalance not implemented")
}
func (UnimplementedTradingServiceServer) GetMaxBySellQty(context.Context, *GetMaxBySellQtyRequest) (*GetMaxBySellQtyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMaxBySellQty not implemented")
}
func (UnimplementedTradingServiceServer) GetOrderHistory(context.Context, *GetOrderHistoryRequest) (*GetOrderHistoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderHistory not implemented")
}
func (UnimplementedTradingServiceServer) GetPendingOrders(context.Context, *GetPendingOrdersRequest) (*GetPendingOrdersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingOrders not implemented")
}
func (UnimplementedTradingServiceServer) GetFilledOrders(context.Context, *GetFilledOrdersRequest) (*GetFilledOrdersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilledOrders not implemented")
}
func (UnimplementedTradingServiceServer) GetPortfolio(context.Context, *GetPortfolioRequest) (*GetPortfolioReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPortfolio not implemented")
}
func (UnimplementedTradingServiceServer) GetOpenPositions(context.Context, *GetOpenPositionsRequest) (*GetOpenPositionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpenPositions not implemented")
}
func (UnimplementedTradingServiceServer) GetOpenPositionBySymbol(context.Context, *GetOpenPositionBySymbolRequest) (*GetOpenPositionBySymbolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpenPositionBySymbol not implemented")
}
func (UnimplementedTradingServiceServer) GetClosePositions(context.Context, *GetClosedPositionsRequest) (*GetClosedPositionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClosePositions not implemented")
}
func (UnimplementedTradingServiceServer) GetClosePositionBySymbol(context.Context, *GetClosedPositionBySymbolRequest) (*GetClosedPositionBySymbolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClosePositionBySymbol not implemented")
}
func (UnimplementedTradingServiceServer) GetCurrentPrice(context.Context, *GetCurrentPriceRequest) (*GetCurrentPriceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentPrice not implemented")
}
func (UnimplementedTradingServiceServer) mustEmbedUnimplementedTradingServiceServer() {}

// UnsafeTradingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TradingServiceServer will
// result in compilation errors.
type UnsafeTradingServiceServer interface {
	mustEmbedUnimplementedTradingServiceServer()
}

func RegisterTradingServiceServer(s grpc.ServiceRegistrar, srv TradingServiceServer) {
	s.RegisterService(&TradingService_ServiceDesc, srv)
}

func _TradingService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_ray.TradingService/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingService_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_ray.TradingService/CancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).CancelOrder(ctx, req.(*CancelOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingService_ModifyOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).ModifyOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_ray.TradingService/ModifyOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).ModifyOrder(ctx, req.(*ModifyOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingService_GetAccountBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).GetAccountBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_ray.TradingService/GetAccountBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).GetAccountBalance(ctx, req.(*GetAccountBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingService_GetMaxBySellQty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMaxBySellQtyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).GetMaxBySellQty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_ray.TradingService/GetMaxBySellQty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).GetMaxBySellQty(ctx, req.(*GetMaxBySellQtyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingService_GetOrderHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).GetOrderHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_ray.TradingService/GetOrderHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).GetOrderHistory(ctx, req.(*GetOrderHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingService_GetPendingOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPendingOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).GetPendingOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_ray.TradingService/GetPendingOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).GetPendingOrders(ctx, req.(*GetPendingOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingService_GetFilledOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilledOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).GetFilledOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_ray.TradingService/GetFilledOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).GetFilledOrders(ctx, req.(*GetFilledOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingService_GetPortfolio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPortfolioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).GetPortfolio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_ray.TradingService/GetPortfolio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).GetPortfolio(ctx, req.(*GetPortfolioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingService_GetOpenPositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOpenPositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).GetOpenPositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_ray.TradingService/GetOpenPositions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).GetOpenPositions(ctx, req.(*GetOpenPositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingService_GetOpenPositionBySymbol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOpenPositionBySymbolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).GetOpenPositionBySymbol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_ray.TradingService/GetOpenPositionBySymbol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).GetOpenPositionBySymbol(ctx, req.(*GetOpenPositionBySymbolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingService_GetClosePositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClosedPositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).GetClosePositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_ray.TradingService/GetClosePositions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).GetClosePositions(ctx, req.(*GetClosedPositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingService_GetClosePositionBySymbol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClosedPositionBySymbolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).GetClosePositionBySymbol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_ray.TradingService/GetClosePositionBySymbol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).GetClosePositionBySymbol(ctx, req.(*GetClosedPositionBySymbolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingService_GetCurrentPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).GetCurrentPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_ray.TradingService/GetCurrentPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).GetCurrentPrice(ctx, req.(*GetCurrentPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TradingService_ServiceDesc is the grpc.ServiceDesc for TradingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TradingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_ray.TradingService",
	HandlerType: (*TradingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrder",
			Handler:    _TradingService_CreateOrder_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _TradingService_CancelOrder_Handler,
		},
		{
			MethodName: "ModifyOrder",
			Handler:    _TradingService_ModifyOrder_Handler,
		},
		{
			MethodName: "GetAccountBalance",
			Handler:    _TradingService_GetAccountBalance_Handler,
		},
		{
			MethodName: "GetMaxBySellQty",
			Handler:    _TradingService_GetMaxBySellQty_Handler,
		},
		{
			MethodName: "GetOrderHistory",
			Handler:    _TradingService_GetOrderHistory_Handler,
		},
		{
			MethodName: "GetPendingOrders",
			Handler:    _TradingService_GetPendingOrders_Handler,
		},
		{
			MethodName: "GetFilledOrders",
			Handler:    _TradingService_GetFilledOrders_Handler,
		},
		{
			MethodName: "GetPortfolio",
			Handler:    _TradingService_GetPortfolio_Handler,
		},
		{
			MethodName: "GetOpenPositions",
			Handler:    _TradingService_GetOpenPositions_Handler,
		},
		{
			MethodName: "GetOpenPositionBySymbol",
			Handler:    _TradingService_GetOpenPositionBySymbol_Handler,
		},
		{
			MethodName: "GetClosePositions",
			Handler:    _TradingService_GetClosePositions_Handler,
		},
		{
			MethodName: "GetClosePositionBySymbol",
			Handler:    _TradingService_GetClosePositionBySymbol_Handler,
		},
		{
			MethodName: "GetCurrentPrice",
			Handler:    _TradingService_GetCurrentPrice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
