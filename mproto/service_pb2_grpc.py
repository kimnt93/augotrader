# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import service_pb2 as service__pb2


class TradingServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateOrder = channel.unary_unary(
                '/grpc_ray.TradingService/CreateOrder',
                request_serializer=service__pb2.CreateOrderRequest.SerializeToString,
                response_deserializer=service__pb2.CreateOrderReply.FromString,
                )
        self.CancelOrder = channel.unary_unary(
                '/grpc_ray.TradingService/CancelOrder',
                request_serializer=service__pb2.CancelOrderRequest.SerializeToString,
                response_deserializer=service__pb2.CancelOrderReply.FromString,
                )
        self.ModifyOrder = channel.unary_unary(
                '/grpc_ray.TradingService/ModifyOrder',
                request_serializer=service__pb2.ModifyOrderRequest.SerializeToString,
                response_deserializer=service__pb2.ModifyOrderReply.FromString,
                )
        self.GetAccountBalance = channel.unary_unary(
                '/grpc_ray.TradingService/GetAccountBalance',
                request_serializer=service__pb2.GetAccountBalanceRequest.SerializeToString,
                response_deserializer=service__pb2.GetAccountBalanceReply.FromString,
                )
        self.GetMaxBySellQty = channel.unary_unary(
                '/grpc_ray.TradingService/GetMaxBySellQty',
                request_serializer=service__pb2.GetMaxBySellQtyRequest.SerializeToString,
                response_deserializer=service__pb2.GetMaxBySellQtyReply.FromString,
                )
        self.GetOrderHistory = channel.unary_unary(
                '/grpc_ray.TradingService/GetOrderHistory',
                request_serializer=service__pb2.GetOrderHistoryRequest.SerializeToString,
                response_deserializer=service__pb2.GetOrderHistoryReply.FromString,
                )
        self.GetPendingOrders = channel.unary_unary(
                '/grpc_ray.TradingService/GetPendingOrders',
                request_serializer=service__pb2.GetPendingOrdersRequest.SerializeToString,
                response_deserializer=service__pb2.GetPendingOrdersReply.FromString,
                )
        self.GetFilledOrders = channel.unary_unary(
                '/grpc_ray.TradingService/GetFilledOrders',
                request_serializer=service__pb2.GetFilledOrdersRequest.SerializeToString,
                response_deserializer=service__pb2.GetFilledOrdersReply.FromString,
                )
        self.GetPortfolio = channel.unary_unary(
                '/grpc_ray.TradingService/GetPortfolio',
                request_serializer=service__pb2.GetPortfolioRequest.SerializeToString,
                response_deserializer=service__pb2.GetPortfolioReply.FromString,
                )
        self.GetOpenPositions = channel.unary_unary(
                '/grpc_ray.TradingService/GetOpenPositions',
                request_serializer=service__pb2.GetOpenPositionsRequest.SerializeToString,
                response_deserializer=service__pb2.GetOpenPositionsReply.FromString,
                )
        self.GetOpenPositionBySymbol = channel.unary_unary(
                '/grpc_ray.TradingService/GetOpenPositionBySymbol',
                request_serializer=service__pb2.GetOpenPositionBySymbolRequest.SerializeToString,
                response_deserializer=service__pb2.GetOpenPositionBySymbolReply.FromString,
                )
        self.GetClosePositions = channel.unary_unary(
                '/grpc_ray.TradingService/GetClosePositions',
                request_serializer=service__pb2.GetClosedPositionsRequest.SerializeToString,
                response_deserializer=service__pb2.GetClosedPositionsReply.FromString,
                )
        self.GetClosePositionBySymbol = channel.unary_unary(
                '/grpc_ray.TradingService/GetClosePositionBySymbol',
                request_serializer=service__pb2.GetClosedPositionBySymbolRequest.SerializeToString,
                response_deserializer=service__pb2.GetClosedPositionBySymbolReply.FromString,
                )
        self.GetCurrentPrice = channel.unary_unary(
                '/grpc_ray.TradingService/GetCurrentPrice',
                request_serializer=service__pb2.GetCurrentPriceRequest.SerializeToString,
                response_deserializer=service__pb2.GetCurrentPriceReply.FromString,
                )


class TradingServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateOrder(self, request, context):
        """CreateOrder, CancelOrder, ModifyOrder
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ModifyOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAccountBalance(self, request, context):
        """GetAccountBalance
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMaxBySellQty(self, request, context):
        """GetMaxBySellQty
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOrderHistory(self, request, context):
        """GetOrderHistory
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPendingOrders(self, request, context):
        """GetPendingOrders
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFilledOrders(self, request, context):
        """GetFilledOrders
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPortfolio(self, request, context):
        """GetPortfolio
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOpenPositions(self, request, context):
        """GetOpenPositions
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOpenPositionBySymbol(self, request, context):
        """GetPositionBySymbol
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetClosePositions(self, request, context):
        """GetClosePositions
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetClosePositionBySymbol(self, request, context):
        """GetClosePositionBySymbol
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCurrentPrice(self, request, context):
        """access data from Ray

        GetCurrentPrice
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TradingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateOrder,
                    request_deserializer=service__pb2.CreateOrderRequest.FromString,
                    response_serializer=service__pb2.CreateOrderReply.SerializeToString,
            ),
            'CancelOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelOrder,
                    request_deserializer=service__pb2.CancelOrderRequest.FromString,
                    response_serializer=service__pb2.CancelOrderReply.SerializeToString,
            ),
            'ModifyOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.ModifyOrder,
                    request_deserializer=service__pb2.ModifyOrderRequest.FromString,
                    response_serializer=service__pb2.ModifyOrderReply.SerializeToString,
            ),
            'GetAccountBalance': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAccountBalance,
                    request_deserializer=service__pb2.GetAccountBalanceRequest.FromString,
                    response_serializer=service__pb2.GetAccountBalanceReply.SerializeToString,
            ),
            'GetMaxBySellQty': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMaxBySellQty,
                    request_deserializer=service__pb2.GetMaxBySellQtyRequest.FromString,
                    response_serializer=service__pb2.GetMaxBySellQtyReply.SerializeToString,
            ),
            'GetOrderHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOrderHistory,
                    request_deserializer=service__pb2.GetOrderHistoryRequest.FromString,
                    response_serializer=service__pb2.GetOrderHistoryReply.SerializeToString,
            ),
            'GetPendingOrders': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPendingOrders,
                    request_deserializer=service__pb2.GetPendingOrdersRequest.FromString,
                    response_serializer=service__pb2.GetPendingOrdersReply.SerializeToString,
            ),
            'GetFilledOrders': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFilledOrders,
                    request_deserializer=service__pb2.GetFilledOrdersRequest.FromString,
                    response_serializer=service__pb2.GetFilledOrdersReply.SerializeToString,
            ),
            'GetPortfolio': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPortfolio,
                    request_deserializer=service__pb2.GetPortfolioRequest.FromString,
                    response_serializer=service__pb2.GetPortfolioReply.SerializeToString,
            ),
            'GetOpenPositions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOpenPositions,
                    request_deserializer=service__pb2.GetOpenPositionsRequest.FromString,
                    response_serializer=service__pb2.GetOpenPositionsReply.SerializeToString,
            ),
            'GetOpenPositionBySymbol': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOpenPositionBySymbol,
                    request_deserializer=service__pb2.GetOpenPositionBySymbolRequest.FromString,
                    response_serializer=service__pb2.GetOpenPositionBySymbolReply.SerializeToString,
            ),
            'GetClosePositions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetClosePositions,
                    request_deserializer=service__pb2.GetClosedPositionsRequest.FromString,
                    response_serializer=service__pb2.GetClosedPositionsReply.SerializeToString,
            ),
            'GetClosePositionBySymbol': grpc.unary_unary_rpc_method_handler(
                    servicer.GetClosePositionBySymbol,
                    request_deserializer=service__pb2.GetClosedPositionBySymbolRequest.FromString,
                    response_serializer=service__pb2.GetClosedPositionBySymbolReply.SerializeToString,
            ),
            'GetCurrentPrice': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCurrentPrice,
                    request_deserializer=service__pb2.GetCurrentPriceRequest.FromString,
                    response_serializer=service__pb2.GetCurrentPriceReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpc_ray.TradingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TradingService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_ray.TradingService/CreateOrder',
            service__pb2.CreateOrderRequest.SerializeToString,
            service__pb2.CreateOrderReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CancelOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_ray.TradingService/CancelOrder',
            service__pb2.CancelOrderRequest.SerializeToString,
            service__pb2.CancelOrderReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ModifyOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_ray.TradingService/ModifyOrder',
            service__pb2.ModifyOrderRequest.SerializeToString,
            service__pb2.ModifyOrderReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAccountBalance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_ray.TradingService/GetAccountBalance',
            service__pb2.GetAccountBalanceRequest.SerializeToString,
            service__pb2.GetAccountBalanceReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMaxBySellQty(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_ray.TradingService/GetMaxBySellQty',
            service__pb2.GetMaxBySellQtyRequest.SerializeToString,
            service__pb2.GetMaxBySellQtyReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOrderHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_ray.TradingService/GetOrderHistory',
            service__pb2.GetOrderHistoryRequest.SerializeToString,
            service__pb2.GetOrderHistoryReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPendingOrders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_ray.TradingService/GetPendingOrders',
            service__pb2.GetPendingOrdersRequest.SerializeToString,
            service__pb2.GetPendingOrdersReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetFilledOrders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_ray.TradingService/GetFilledOrders',
            service__pb2.GetFilledOrdersRequest.SerializeToString,
            service__pb2.GetFilledOrdersReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPortfolio(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_ray.TradingService/GetPortfolio',
            service__pb2.GetPortfolioRequest.SerializeToString,
            service__pb2.GetPortfolioReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOpenPositions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_ray.TradingService/GetOpenPositions',
            service__pb2.GetOpenPositionsRequest.SerializeToString,
            service__pb2.GetOpenPositionsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOpenPositionBySymbol(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_ray.TradingService/GetOpenPositionBySymbol',
            service__pb2.GetOpenPositionBySymbolRequest.SerializeToString,
            service__pb2.GetOpenPositionBySymbolReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetClosePositions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_ray.TradingService/GetClosePositions',
            service__pb2.GetClosedPositionsRequest.SerializeToString,
            service__pb2.GetClosedPositionsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetClosePositionBySymbol(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_ray.TradingService/GetClosePositionBySymbol',
            service__pb2.GetClosedPositionBySymbolRequest.SerializeToString,
            service__pb2.GetClosedPositionBySymbolReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCurrentPrice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_ray.TradingService/GetCurrentPrice',
            service__pb2.GetCurrentPriceRequest.SerializeToString,
            service__pb2.GetCurrentPriceReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
